vim basic : 

dd(insert) - delete a line
:q(cmd) - quit
ESC(insert) - switch to cmd mode
:w(cmd) - write the current state like save
:wq(cmd) - save and exit
:q!(cmd) - exit  without save
i(cmd) - switch to insert mode
:set number(cmd) - display line numbers



--------------------------------------------------------------------------------------------------------------------------------------




1) Count of NoOfSet bits from 1 to given (n):
    If the input number is of the form 2^b -1 e.g., 1, 3, 7, 15.. etc, the number of set bits is b * 2^(b-1). 
    This is because for all the numbers 0 to (2^b)-1, if you complement and flip the list you end up with the same 
    list (half the bits are on, half off).

    If the number does not have all set bits, then some position m is the position of leftmost set bit. 
    The number of set bits in that position is n – (1 << m) + 1. The remaining set bits are in two parts:

    1) The bits in the (m-1) positions down to the point where the leftmost bit becomes 0, and
    2) The 2^(m-1) numbers below that point, which is the closed form above.

    An easy way to look at it is to consider the number 6:

    0|0 0
    0|0 1
    0|1 0
    0|1 1
    -|--
    1|0 0
    1|0 1
    1|1 0
    The leftmost set bit is in position 2 (positions are considered starting from 0). 
    If we mask that off what remains is 2 (the “1 0” in the right part of the last row.) So the number of 
    bits in the 2nd position (the lower left box) is 3 (that is, 2 + 1). The set bits from 0-3 (the upper right box above) 
    is 2*2^(2-1) = 4. The box in the lower right is the remaining bits we haven’t yet counted, and is the number of set bits 
    for all the numbers up to 2 (the value of the last entry in the lower right box) which can be figured recursively.

        unsigned int getLeftmostBit(int n)  
        {  
            int m = 0;  
            while (n > 1)  
            {  
                n = n >> 1;  
                m++;  
            }  
            return m;  
        }  
        
        /* Given the position of previous leftmost  
        set bit in n (or an upper bound on  
        leftmost position) returns the new  
        position of leftmost set bit in n */
        unsigned int getNextLeftmostBit(int n, int m)  
        {  
            unsigned int temp = 1 << m;  
            while (n < temp) {  
                temp = temp >> 1;  
                m--;  
            }  
            return m;  
        }  
        
        // The main recursive function used by countSetBits()  
        unsigned int _countSetBits(unsigned int n, int m);  
        
        // Returns count of set bits present in  
        // all numbers from 1 to n  
        unsigned int countSetBits(unsigned int n)  
        {  
            // Get the position of leftmost set  
            // bit in n. This will be used as an  
            // upper bound for next set bit function  
            int m = getLeftmostBit(n);  
        
            // Use the position  
            return _countSetBits(n, m);  
        }  
        
        unsigned int _countSetBits(unsigned int n, int m)  
        {  
            // Base Case: if n is 0, then set bit  
            // count is 0  
            if (n == 0)  
                return 0;  
        
            /* get position of next leftmost set bit */
            m = getNextLeftmostBit(n, m);  
        
            // If n is of the form 2^x-1, i.e., if n  
            // is like 1, 3, 7, 15, 31, .. etc,  
            // then we are done.  
            // Since positions are considered starting  
            // from 0, 1 is added to m  
            if (n == ((unsigned int)1 << (m + 1)) - 1)  
                return (unsigned int)(m + 1) * (1 << m);  
        
            // update n for next recursive call  
            n = n - (1 << m);  
            return (n + 1) + countSetBits(n) + m * (1 << (m - 1));  
        }  
        
        // Driver code  
        int main()  
        {  
            int n = 17;  
            cout<<"Total set bit count is "<< countSetBits(n);  
            return 0;  
        }  


-----------------------------------------------------------------------------------------------------------------------------


Takahashi had N glasses of liquor. The amount and alcohol percentage of the
i-th liquor were Vi milliliters and Pi percent by volume, respectively.
Takahashi gets drunk when his alcohol intake exceeds X milliliters.
Which of the N liquors was he drinking when he gets drunk? 
If he was not drunk even after drinking all the liquors, print -1 instead.

2 15
200 5
350 3

2

The 1-st liquor contains 200×5/100 = 10 milliliters of alcohol.
The 2-nd liquor contains 350×3/100 = 10.5 milliliters of alcohol.
His alcohol intake exceeds 15 milliliters for the first time when drinking the 2-nd liquor.

The Problem here is with floating point so having an accumlator variable as float will fail
to avoid such Problems use int and multiply x with 100 and check when accumlator goes > X

https://atcoder.jp/contests/abc189/tasks/abc189_b

void Alcohloic(){
    int n;
    ll x;
    cin>>n>>x;
    vector<pair<int,int>>v(n,{0,0});
    for(int i =0;i<n;i++) cin>>v[i].first>>v[i].second;
    int acc = 0;
    x*=100;
    for(int i =0;i<n;i++){
        acc+=(v[i].first*v[i].second);
        if(acc>x){
            cout<<i+1;
            return;
        }
    }
    cout<<-1;
    return;
}


----------------------------------------------------------------



Max and second max in O(n) in single travrsl 

Approach: Find the second largest element in a single traversal. 
Below is the complete algorithm for doing this:  

1) Initialize two variables first and second to INT_MIN as
   first = second = INT_MIN
2) Start traversing the array,
   a) If the current element in array say arr[i] is greater
      than first. Then update first and second as,
      second = first
      first = arr[i]
   b) If the current element is in between first and second,
      then update second to store the value of current variable as
      second = arr[i]
3) Return the value stored in second.


An Efficient Solution can find the minimum two elements in one traversal. Below is complete algorithm.


1) Initialize both first and second smallest as INT_MAX
   first = second = INT_MAX
2) Loop through all the elements.
   a) If the current element is smaller than first, then update first 
       and second. 
   b) Else if the current element is smaller than second then update 
    second